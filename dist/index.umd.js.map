{"version":3,"file":"index.umd.js","sources":["../src/index.js"],"sourcesContent":["const spliceString = require('splice-string')\n\nconst contractionsTable = {\n    \"ain't\": ['am not', 'are not', 'is not', 'has not', 'have not'],\n    \"aren't\": ['are not'],\n    \"can't\": ['cannot'],\n    \"could've\": ['could have'],\n    \"couldn't've\": ['could not have'],\n    \"couldn't\": ['could not'],\n    \"didn't\": ['did not'],\n    \"doesn't\": ['does not'],\n    \"don't\": ['do not'],\n    \"gonna\": ['going to'],\n    \"gotta\": ['got a', 'got an', 'got to'],\n    \"hadn't've\": ['had not have'],\n    \"hadn't\": ['had not'],\n    \"hasn't\": ['has not'],\n    \"haven't\": ['have not'],\n    \"he'd've\": ['he would have'],\n    \"he'd\": ['he had', 'he would'],\n    \"he'll\": ['he shall', 'he will'],\n    \"he's\": ['he has', 'he is'],\n    \"how'd\": ['how did', 'how would'],\n    \"how'll\": ['how will'],\n    \"how's\": ['how does', 'how has', 'how is'],\n    \"i'd've\": ['i would have'],\n    \"i'd\": ['i had', 'i would'],\n    \"i'll\": ['i shall', 'i will'],\n    \"i'm\": ['i am'],\n    \"i've\": ['i have'],\n    \"i'ven't\": ['i have not'],\n    \"isn't\": ['is not'],\n    \"it'd've\": ['it would have'],\n    \"it'd\": ['it would'],\n    \"it'll\": ['it shall', 'it will'],\n    \"it's\": ['it has', 'it is'],\n    \"let's\": ['let us'],\n    \"might've\": ['might have'],\n    \"mightn't've\": ['might not have'],\n    \"mightn't\": ['might not'],\n    \"must've\": ['must have'],\n    \"mustn't\": ['must not'],\n    \"needn't\": ['need not'],\n    \"not've\": ['not have'],\n    \"ol'\": ['old'],\n    \"oughtn't\": ['ought not'],\n    \"shan't\": ['shall not'],\n    \"she'd've\": ['she would have'],\n    \"she'd\": ['she had', 'she would'],\n    \"she'll\": ['she shall', 'she will'],\n    \"she's\": ['she has', 'she is'],\n    \"should've\": ['should have'],\n    \"shouldn't've\": ['should not have'],\n    \"shouldn't\": ['should not'],\n    \"somebody'd've\": ['somebody would have'],\n    \"somebody'd\": ['somebody would', 'someone had'],\n    \"somebody'll've\": ['somebody will have'],\n    \"somebody'll\": ['somebody will'],\n    \"somebody's\": ['somebody has', 'somebody is'],\n    \"someone'd've\": ['someone would have'],\n    \"someone'd\": ['someone had', 'someone would'],\n    \"someone'll\": ['someone will'],\n    \"someone's\": ['someone is', 'someone has'],\n    \"something'd've\": ['something would have'],\n    \"something'd\": ['someone would', 'something had'],\n    \"something'll\": ['something will'],\n    \"something's\": ['something has', 'something is'],\n    \"that'd\": ['that had', 'that would'],\n    \"that'll\": ['that shall', 'that will'],\n    \"that's\": ['that has', 'that is'],\n    \"there'd've\": ['there would have'],\n    \"there'd\": ['there had', 'there would'],\n    \"there're\": ['there are'],\n    \"there's\": ['there has', 'there is'],\n    \"they'd've\": ['they would have'],\n    \"they'd\": ['they had', 'they would'],\n    \"they'll\": ['they shall', 'they will'],\n    \"they're\": ['they are'],\n    \"they've\": ['they have'],\n    \"they'ven't\": ['they have not'],\n    \"wanna\": ['want a', 'want an', 'want to'],\n    \"wasn't\": ['was not'],\n    \"we'd've\": ['we would have'],\n    \"we'd\": ['we had', 'we would'],\n    \"we'dn't've\": ['we would not have'],\n    \"we'll\": ['we will'],\n    \"we're\": ['we are'],\n    \"we've\": ['we have'],\n    \"weren't\": ['were not'],\n    \"what'd\": ['what did'],\n    \"what'll\": ['what shall', 'what will'],\n    \"what're\": ['what are'],\n    \"what's\": ['what does', 'what has', 'what is'],\n    \"what've\": ['what have'],\n    \"when's\": ['when has', 'when is'],\n    \"where'd\": ['where did'],\n    \"where're\": ['where are'],\n    \"where's\": ['where does', 'where has', 'where is'],\n    \"where've\": ['where have'],\n    \"who'd've\": ['who would have'],\n    \"who'd\": ['who did', 'who had', 'who would'],\n    \"who'll\": ['who shall', 'who will'],\n    \"who're\": ['who are'],\n    \"who's\": ['who does', 'who has', 'who is'],\n    \"who've\": ['who have'],\n    \"why'd\": ['why did'],\n    \"why'll\": ['why will'],\n    \"why're\": ['why are'],\n    \"why's\": ['why does', 'why has', 'why is'],\n    \"why've\": ['why have'],\n    \"will've\": ['will have'],\n    \"won't've\": ['will not have'],\n    \"won't\": ['will not'],\n    \"would've\": ['would have'],\n    \"wouldn't've\": ['would not have'],\n    \"wouldn't\": ['would not'],\n    \"y'all'd've\": ['you all would have'],\n    \"y'all'dn't've\": ['you all would not have'],\n    \"y'all'll've\": ['you all will have'],\n    \"y'all'll\": ['you all will'],\n    \"y'all've\": ['you all have'],\n    \"y'all'ven't\": ['you all have not'],\n    \"y'all\": ['you all'],\n    \"you'd've\": ['you would have'],\n    \"you'd\": ['you had', 'you would'],\n    \"you'll\": ['you shall', 'you will'],\n    \"you're\": ['you are'],\n    \"you'ren't\": ['you are not'],\n    \"you've\": ['you have'],\n    \"you'ven't\": ['you have not']\n}\n\nconst longformsTable = {\n    \"am not\": \"ain't\",\n    \"are not\": \"ain't\",\n    \"cannot\": \"can't\",\n    \"could have\": \"could've\",\n    // \"could not have\": \"couldn't've\",\n    \"could not\": \"couldn't\",\n    \"did not\": \"didn't\",\n    \"do not\": \"don't\",\n    \"does not\": \"doesn't\",\n    \"going to\": \"gonna\",\n    \"got a\": \"gotta\",\n    \"got an\": \"gotta\",\n    \"got to\": \"gotta\",\n    // \"had not have\": \"hadn't've\",\n    \"had not\": \"hadn't\",\n    \"has not\": \"hasn't\",\n    \"have not\": \"haven't\",\n    \"he had\": \"he'd\",\n    \"he has\": \"he's\",\n    \"he is\": \"he's\",\n    \"he shall\": \"he'll\",\n    \"he will\": \"he'll\",\n    // \"he would have\": \"he'd've\",\n    \"he would\": \"he'd\",\n    \"how did\": \"how'd\",\n    \"how does\": \"how's\",\n    \"how has\": \"how's\",\n    \"how is\": \"how's\",\n    \"how will\": \"how'll\",\n    \"how would\": \"how'd\",\n    \"i am\": \"i'm\",\n    \"i had\": \"i'd\",\n    // \"i have not\": \"i'ven't\",\n    \"i have\": \"i've\",\n    \"i shall\": \"i'll\",\n    \"i will\": \"i'll\",\n    // \"i would have\": \"i'd've\",\n    \"i would\": \"i'd\",\n    \"is not\": \"isn't\",\n    \"it has\": \"it's\",\n    \"it is\": \"it's\",\n    \"it shall\": \"it'll\",\n    \"it will\": \"it'll\",\n    // \"it would have\": \"it'd've\",\n    \"it would\": \"it'd\",\n    \"let us\": \"let's\",\n    \"might have\": \"might've\",\n    // \"might not have\": \"mightn't've\",\n    \"might not\": \"mightn't\",\n    \"must have\": \"must've\",\n    \"must not\": \"mustn't\",\n    \"need not\": \"needn't\",\n    // \"not have\": \"not've\",\n    // \"old\": \"ol'\",\n    \"ought not\": \"oughtn't\",\n    \"shall not\": \"shan't\",\n    \"she had\": \"she'd\",\n    \"she has\": \"she's\",\n    \"she is\": \"she's\",\n    \"she shall\": \"she'll\",\n    \"she will\": \"she'll\",\n    // \"she would have\": \"she'd've\",\n    \"she would\": \"she'd\",\n    \"should have\": \"should've\",\n    // \"should not have\": \"shouldn't've\",\n    \"should not\": \"shouldn't\",\n    \"somebody had\": \"somebody'd\",\n    \"somebody has\": \"somebody's\",\n    \"somebody is\": \"somebody's\",\n    \"somebody will have\": \"somebody'll've\",\n    \"somebody will\": \"somebody'll\",\n    // \"somebody would have\": \"somebody'd've\",\n    \"somebody would\": \"somebody'd\",\n    \"someone had\": \"someone'd\",\n    \"someone is\": \"someone's\",\n    \"someone will\": \"someone'll\",\n    // \"someone would have\": \"someone'd've\",\n    \"someone would\": \"someone'd\",\n    \"something had\": \"something'd\",\n    \"something has\": \"something's\",\n    \"something is\": \"something's\",\n    \"something will\": \"something'll\",\n    // \"something would have\": \"something'd've\",\n    \"something would\": \"something'd\",\n    \"someone has\": \"someone's\",\n    \"that had\": \"that'd\",\n    \"that has\": \"that's\",\n    \"that is\": \"that's\",\n    \"that shall\": \"that'll\",\n    \"that will\": \"that'll\",\n    \"that would\": \"that'd\",\n    \"there are\": \"there're\",\n    \"there had\": \"there'd\",\n    \"there has\": \"there's\",\n    \"there is\": \"there's\",\n    // \"there would have\": \"there'd've\",\n    \"there would\": \"there'd\",\n    \"they are\": \"they're\",\n    \"they had\": \"they'd\",\n    // \"they have not\": \"they'ven't\",\n    \"they have\": \"they've\",\n    \"they shall\": \"they'll\",\n    \"they will\": \"they'll\",\n    // \"they would have\": \"they'd've\",\n    \"they would\": \"they'd\",\n    \"want a\": \"wanna\",\n    \"want an\": \"wanna\",\n    \"want to\": \"wanna\",\n    \"was not\": \"wasn't\",\n    \"we are\": \"we're\",\n    \"we had\": \"we'd\",\n    \"we have\": \"we've\",\n    \"we will\": \"we'll\",\n    \"we would have\": \"we'd've\",\n    \"we would not have\": \"we'dn't've\",\n    \"we would\": \"we'd\",\n    \"were not\": \"weren't\",\n    \"what are\": \"what're\",\n    \"what did\": \"what'd\",\n    \"what does\": \"what's\",\n    \"what has\": \"what's\",\n    \"what have\": \"what've\",\n    \"what is\": \"what's\",\n    \"what shall\": \"what'll\",\n    \"what will\": \"what'll\",\n    \"when has\": \"when's\",\n    \"when is\": \"when's\",\n    \"where are\": \"when're\",\n    \"where did\": \"where'd\",\n    \"where does\": \"where's\",\n    \"where has\": \"where's\",\n    \"where have\": \"where've\",\n    \"where is\": \"where's\",\n    \"who are\": \"who're\",\n    \"who did\": \"who'd\",\n    \"who does\": \"who's\",\n    \"who had\": \"who'd\",\n    \"who has\": \"who's\",\n    \"who have\": \"who've\",\n    \"who is\": \"who's\",\n    \"who shall\": \"who'll\",\n    \"who will\": \"who'll\",\n    // \"who would have\": \"who'd've\",\n    \"who would\": \"who'd\",\n    \"why are\": \"why're\",\n    \"why did\": \"why'd\",\n    \"why does\": \"why's\",\n    \"why has\": \"why's\",\n    \"why have\": \"why've\",\n    \"why is\": \"why's\",\n    \"why will\": \"why'll\",\n    \"will have\": \"will've\",\n    // \"will not have\": \"won't've\",\n    \"will not\": \"won't\",\n    \"would have\": \"would've\",\n    // \"would not have\": \"wouldn't've\",\n    \"would not\": \"wouldn't\",\n    // \"you all have not\": \"y'all'ven't\",\n    // \"you all have\": \"y'all've\",\n    // \"you all will have\": \"y'all'll've\",\n    // \"you all will\": \"y'all'll\",\n    // \"you all would have\": \"y'all'd've\",\n    // \"you all would not have\": \"y'all'dn't've\",\n    \"you all\": \"y'all\",\n    // \"you are not\": \"you'ren't\",\n    \"you are\": \"you're\",\n    \"you had\": \"you'd\",\n    // \"you have not\": \"you'ven't\",\n    \"you have\": \"you've\",\n    \"you shall\": \"you'll\",\n    \"you will\": \"you'll\",\n    // \"you would have\": \"you'd've\",\n    \"you would\": \"you'd\"\n}\n\nconst kontractions = {\n    contractionsTable,\n    longformsTable,\n    updateContractions: function(obj) {\n        Object.assign(this.contractionsTable, obj)\n    },\n    updateLongforms: function(obj) {\n        Object.assign(this.longformsTable, obj)\n    },\n    getIndicesOf: function(searchStr, str) {\n        var searchStrLen = searchStr.length;\n        if (searchStrLen == 0) {\n            return [];\n        }\n        var startIndex = 0, index, indices = [];\n        str = str.toLowerCase();\n        searchStr = searchStr.toLowerCase();\n        while ((index = str.indexOf(searchStr, startIndex)) > -1) {\n            indices.push(index);\n            startIndex = index + searchStrLen;\n        }\n        return indices;\n    },\n    expand: function(str) {\n        // normalize string\n        str = str.toLowerCase()\n        // get an array of contractions, sorted by length\n        const keys = Object.keys(this.contractionsTable)\n        // for every contraction...\n        for (let i = 0; i < keys.length; i++) {\n            // get contraction character length\n            const length = keys[i].length\n            // find all the places it occurs in the string\n            const indices = this.getIndicesOf(keys[i], str).sort((a,b) => b - a)\n            // at each location, replace longform with contraction(s)\n            for (let g = 0; g < indices.length; g++) {\n                let longformLength = this.contractionsTable[keys[i]].length\n                let insertion\n                if (longformLength > 1) {\n                    insertion = `(( ${this.contractionsTable[keys[i]].join(' | ')} ))`\n                } else if (longformLength === 1) {\n                    insertion = this.contractionsTable[keys[i]]\n                } else {\n                    insertion = keys[i]\n                }\n                str = spliceString(str, indices[g], length, insertion)\n            }\n        }\n        return str\n    },\n    contract: function(str) {\n        str = str.toLowerCase()\n        const keys = Object.keys(this.longformsTable).sort((a,b) => b.length - a.length)\n        // for every longform...\n        for (let i = 0; i < keys.length; i++) {\n            // get longform character length\n            const length = keys[i].length\n            // find all the places it occurs in the string\n            const indices = this.getIndicesOf(keys[i], str).sort((a,b) => b - a)\n            // at each location, replace longform with contraction\n            for (let g = 0; g < indices.length; g++) {\n                if (!this.longformsTable[keys[i]]) {\n                    continue\n                }\n                str = spliceString(str, indices[g], length, this.longformsTable[keys[i]])\n            }\n        }\n        return str\n    }\n}\n\nmodule.exports = kontractions\n"],"names":["spliceString","require","contractionsTable","longformsTable","kontractions","updateContractions","obj","Object","assign","updateLongforms","getIndicesOf","searchStr","str","searchStrLen","length","startIndex","index","indices","toLowerCase","indexOf","push","expand","keys","i","sort","a","b","g","longformLength","insertion","join","contract","module","exports"],"mappings":"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"}