{"version":3,"file":"index.umd.js","sources":["../src/index.js"],"sourcesContent":["const spliceString = require('splice-string')\nconst contractionsTable = require('./contractionsTable.js')\nconst longformsTable = require('./longformsTable.js')\n\nconst kontractions = {\n    contractionsTable,\n    longformsTable,\n    updateContractions: function(obj) {\n        Object.assign(this.contractionsTable, obj)\n    },\n    updateLongforms: function(obj) {\n        Object.assign(this.longformsTable, obj)\n    },\n    getIndicesOf: function(searchStr, str) {\n        var searchStrLen = searchStr.length;\n        if (searchStrLen == 0) {\n            return [];\n        }\n        var startIndex = 0, index, indices = [];\n        str = str.toLowerCase();\n        searchStr = searchStr.toLowerCase();\n        while ((index = str.indexOf(searchStr, startIndex)) > -1) {\n            indices.push(index);\n            startIndex = index + searchStrLen;\n        }\n        return indices;\n    },\n    expand: function(str) {\n        // normalize string\n        str = str.toLowerCase()\n        // get an array of contractions, sorted by length\n        const keys = Object.keys(this.contractionsTable)\n        // for every contraction...\n        for (let i = 0; i < keys.length; i++) {\n            // get contraction character length\n            const length = keys[i].length\n            // find all the places it occurs in the string\n            const indices = this.getIndicesOf(keys[i], str).sort((a,b) => b - a)\n            // at each location, replace longform with contraction(s)\n            for (let g = 0; g < indices.length; g++) {\n                let longformLength = this.contractionsTable[keys[i]].length\n                let insertion\n                if (longformLength > 1) {\n                    insertion = `(( ${this.contractionsTable[keys[i]].join(' | ')} ))`\n                } else {\n                    insertion = this.contractionsTable[keys[i]]\n                }\n                str = spliceString(str, indices[g], length, insertion)\n            }\n        }\n        return str\n    },\n    contract: function(str) {\n        str = str.toLowerCase()\n        const keys = Object.keys(this.longformsTable).sort((a,b) => b.length - a.length)\n        // for every longform...\n        for (let i = 0; i < keys.length; i++) {\n            // get longform character length\n            const length = keys[i].length\n            // find all the places it occurs in the string\n            const indices = this.getIndicesOf(keys[i], str).sort((a,b) => b - a)\n            // at each location, replace longform with contraction\n            for (let g = 0; g < indices.length; g++) {\n                str = spliceString(str, indices[g], length, this.longformsTable[keys[i]])\n            }\n        }\n        return str\n    }\n}\n\nmodule.exports = kontractions\n"],"names":["spliceString","require","contractionsTable","longformsTable","kontractions","updateContractions","obj","Object","assign","updateLongforms","getIndicesOf","searchStr","str","searchStrLen","length","startIndex","index","indices","toLowerCase","indexOf","push","expand","keys","i","sort","a","b","g","longformLength","insertion","join","contract","module","exports"],"mappings":"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"}