{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["const spliceString = require('splice-string')\nconst contractionsTable = require('./contractionsTable.js')\nconst longformsTable = require('./longformsTable.js')\n\nconst kontractions = {\n    contractionsTable,\n    longformsTable,\n    updateContractions: function(obj) {\n        Object.assign(this.contractionsTable, obj)\n    },\n    updateLongforms: function(obj) {\n        Object.assign(this.longformsTable, obj)\n    },\n    getIndicesOf: function(searchStr, str) {\n        var searchStrLen = searchStr.length;\n        if (searchStrLen == 0) {\n            return [];\n        }\n        var startIndex = 0, index, indices = [];\n        str = str.toLowerCase();\n        searchStr = searchStr.toLowerCase();\n        while ((index = str.indexOf(searchStr, startIndex)) > -1) {\n            indices.push(index);\n            startIndex = index + searchStrLen;\n        }\n        return indices;\n    },\n    expand: function(str) {\n        // normalize string\n        str = str.toLowerCase()\n        // get an array of contractions, sorted by length\n        const keys = Object.keys(this.contractionsTable)\n        // for every contraction...\n        for (let i = 0; i < keys.length; i++) {\n            // get contraction character length\n            const length = keys[i].length\n            // find all the places it occurs in the string\n            const indices = this.getIndicesOf(keys[i], str).sort((a,b) => b - a)\n            // at each location, replace longform with contraction(s)\n            for (let g = 0; g < indices.length; g++) {\n                let longformLength = this.contractionsTable[keys[i]].length\n                let insertion\n                if (longformLength > 1) {\n                    insertion = `(( ${this.contractionsTable[keys[i]].join(' | ')} ))`\n                } else {\n                    insertion = this.contractionsTable[keys[i]]\n                }\n                str = spliceString(str, indices[g], length, insertion)\n            }\n        }\n        return str\n    },\n    contract: function(str) {\n        str = str.toLowerCase()\n        const keys = Object.keys(this.longformsTable).sort((a,b) => b.length - a.length)\n        // for every longform...\n        for (let i = 0; i < keys.length; i++) {\n            // get longform character length\n            const length = keys[i].length\n            // find all the places it occurs in the string\n            const indices = this.getIndicesOf(keys[i], str).sort((a,b) => b - a)\n            // at each location, replace longform with contraction\n            for (let g = 0; g < indices.length; g++) {\n                str = spliceString(str, indices[g], length, this.longformsTable[keys[i]])\n            }\n        }\n        return str\n    }\n}\n\nmodule.exports = kontractions\n"],"names":["spliceString","require","contractionsTable","longformsTable","kontractions","obj","assign","searchStr","str","searchStrLen","length","startIndex","index","indices","toLowerCase","indexOf","push","keys","Object","i","getIndicesOf","sort","a","b","g","longformLength","insertion","join","module","exports"],"mappings":";;AAAA,IAAMA,eAAeC,QAAQ,eAAR,CAArB;AACA,IAAMC,oBAAoBD,QAAQ,wBAAR,CAA1B;AACA,IAAME,iBAAiBF,QAAQ,qBAAR,CAAvB;;AAEA,IAAMG,eAAe;wCAAA;kCAAA;wBAGG,4BAASC,GAAT,EAAc;eACvBC,MAAP,CAAc,KAAKJ,iBAAnB,EAAsCG,GAAtC;KAJa;qBAMA,yBAASA,GAAT,EAAc;eACpBC,MAAP,CAAc,KAAKH,cAAnB,EAAmCE,GAAnC;KAPa;kBASH,sBAASE,SAAT,EAAoBC,GAApB,EAAyB;YAC/BC,eAAeF,UAAUG,MAA7B;YACID,gBAAgB,CAApB,EAAuB;mBACZ,EAAP;;YAEAE,aAAa,CAAjB;YAAoBC,KAApB;YAA2BC,UAAU,EAArC;cACML,IAAIM,WAAJ,EAAN;oBACYP,UAAUO,WAAV,EAAZ;eACO,CAACF,QAAQJ,IAAIO,OAAJ,CAAYR,SAAZ,EAAuBI,UAAvB,CAAT,IAA+C,CAAC,CAAvD,EAA0D;oBAC9CK,IAAR,CAAaJ,KAAb;yBACaA,QAAQH,YAArB;;eAEGI,OAAP;KArBa;YAuBT,gBAASL,GAAT,EAAc;;cAEZA,IAAIM,WAAJ,EAAN;;YAEMG,OAAOC,OAAOD,IAAP,CAAY,KAAKf,iBAAjB,CAAb;;aAEK,IAAIiB,IAAI,CAAb,EAAgBA,IAAIF,KAAKP,MAAzB,EAAiCS,GAAjC,EAAsC;;gBAE5BT,SAASO,KAAKE,CAAL,EAAQT,MAAvB;;gBAEMG,UAAU,KAAKO,YAAL,CAAkBH,KAAKE,CAAL,CAAlB,EAA2BX,GAA3B,EAAgCa,IAAhC,CAAqC,UAACC,CAAD,EAAGC,CAAH;uBAASA,IAAID,CAAb;aAArC,CAAhB;;iBAEK,IAAIE,IAAI,CAAb,EAAgBA,IAAIX,QAAQH,MAA5B,EAAoCc,GAApC,EAAyC;oBACjCC,iBAAiB,KAAKvB,iBAAL,CAAuBe,KAAKE,CAAL,CAAvB,EAAgCT,MAArD;oBACIgB,kBAAJ;oBACID,iBAAiB,CAArB,EAAwB;wCACF,KAAKvB,iBAAL,CAAuBe,KAAKE,CAAL,CAAvB,EAAgCQ,IAAhC,CAAqC,KAArC,CAAlB;iBADJ,MAEO;gCACS,KAAKzB,iBAAL,CAAuBe,KAAKE,CAAL,CAAvB,CAAZ;;sBAEEnB,aAAaQ,GAAb,EAAkBK,QAAQW,CAAR,CAAlB,EAA8Bd,MAA9B,EAAsCgB,SAAtC,CAAN;;;eAGDlB,GAAP;KA9Ca;cAgDP,kBAASA,GAAT,EAAc;cACdA,IAAIM,WAAJ,EAAN;YACMG,OAAOC,OAAOD,IAAP,CAAY,KAAKd,cAAjB,EAAiCkB,IAAjC,CAAsC,UAACC,CAAD,EAAGC,CAAH;mBAASA,EAAEb,MAAF,GAAWY,EAAEZ,MAAtB;SAAtC,CAAb;;aAEK,IAAIS,IAAI,CAAb,EAAgBA,IAAIF,KAAKP,MAAzB,EAAiCS,GAAjC,EAAsC;;gBAE5BT,SAASO,KAAKE,CAAL,EAAQT,MAAvB;;gBAEMG,UAAU,KAAKO,YAAL,CAAkBH,KAAKE,CAAL,CAAlB,EAA2BX,GAA3B,EAAgCa,IAAhC,CAAqC,UAACC,CAAD,EAAGC,CAAH;uBAASA,IAAID,CAAb;aAArC,CAAhB;;iBAEK,IAAIE,IAAI,CAAb,EAAgBA,IAAIX,QAAQH,MAA5B,EAAoCc,GAApC,EAAyC;sBAC/BxB,aAAaQ,GAAb,EAAkBK,QAAQW,CAAR,CAAlB,EAA8Bd,MAA9B,EAAsC,KAAKP,cAAL,CAAoBc,KAAKE,CAAL,CAApB,CAAtC,CAAN;;;eAGDX,GAAP;;CA9DR;;AAkEAoB,OAAOC,OAAP,GAAiBzB,YAAjB"}